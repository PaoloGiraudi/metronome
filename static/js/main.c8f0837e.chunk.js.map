{"version":3,"sources":["sounds/click1.wav","App.js","reportWebVitals.js","index.js"],"names":["App","useReducer","state","action","type","speed","value","playing","useMetronome","dispatch","useSound","click1","playOn","useEffect","interval","setInterval","clearInterval","typeSpeed","e","parseInt","target","className","onClick","onChange","min","max","step","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,MAA0B,mCC+E1BA,MArDf,WAAgB,IAAD,EAtBf,WAAyB,IAAD,EACEC,sBACtB,SAACC,EAAOC,GACN,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAO,2BAAKF,GAAZ,IAAmBG,MAAOH,EAAMG,MAAQ,IAC1C,IAAK,kBACH,OAAO,2BAAKH,GAAZ,IAAmBG,MAAOH,EAAMG,MAAQ,IAC1C,IAAK,cACH,OAAO,2BAAKH,GAAZ,IAAmBG,MAAOF,EAAOG,QACnC,IAAK,eACH,OAAO,2BAAKJ,GAAZ,IAAmBK,SAAUL,EAAMK,aAGzC,CACEF,MAAO,GACPE,SAAS,IAhBS,mBAmBtB,MAAO,CAnBe,WAuBeC,GADxB,0BACNH,EADM,EACNA,MAAOE,EADD,EACCA,QAAWE,EADZ,OAEIC,YAASC,GAAnBC,EAFM,oBAIbC,qBAAU,WACR,GAAIN,EAAS,CACX,IAAMO,EAAWC,aAAY,WAC3BH,MACC,IAAQP,GACX,OAAO,kBAAMW,cAAcF,OAE5B,CAACT,EAAOE,IAEX,IAOMU,EAAY,SAACC,GACjBT,EAAS,CAAEL,KAAM,cAAeE,MAAOa,SAASD,EAAEE,OAAOd,QAAU,MAWrE,OACE,oCACE,kDACA,sBAAKe,UAAU,YAAf,UACE,wBAAQC,QApBI,WAChBb,EAAS,CAAEL,KAAM,qBAmBb,iBACA,uBAAOE,MAAOD,EAAOkB,SAAUN,IAC/B,wBAAQK,QAzBF,WACVb,EAAS,CAAEL,KAAM,qBAwBb,iBACA,uBACEA,KAAK,QACLoB,IAAI,KACJC,IAAI,MACJnB,MAAOD,EACPqB,KAAK,IACLH,SAAUN,OAGd,yBAAQK,QAxBQ,WAClBb,EAAS,CAAEL,KAAM,iBAEZG,GACHK,KAoBA,cAAgCL,EAAU,OAAS,eC9D1CoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8f0837e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click1.07cda4b8.wav\";","import React, { useEffect, useReducer } from \"react\";\nimport useSound from \"use-sound\";\nimport click1 from \"./sounds/click1.wav\";\n\nfunction useMetronome() {\n  let [state, dispatch] = useReducer(\n    (state, action) => {\n      switch (action.type) {\n        case \"INCREMENT_SPEED\":\n          return { ...state, speed: state.speed + 1 };\n        case \"DECREMENT_SPEED\":\n          return { ...state, speed: state.speed - 1 };\n        case \"INPUT_SPEED\":\n          return { ...state, speed: action.value };\n        case \"TOGGLE_START\":\n          return { ...state, playing: !state.playing };\n      }\n    },\n    {\n      speed: 60,\n      playing: false,\n    }\n  );\n  return [state, dispatch];\n}\n\nfunction App() {\n  let [{ speed, playing }, dispatch] = useMetronome();\n  const [playOn] = useSound(click1);\n\n  useEffect(() => {\n    if (playing) {\n      const interval = setInterval(() => {\n        playOn();\n      }, 60000 / speed);\n      return () => clearInterval(interval);\n    }\n  }, [speed, playing]);\n\n  const add = () => {\n    dispatch({ type: \"INCREMENT_SPEED\" });\n  };\n  const substract = () => {\n    dispatch({ type: \"DECREMENT_SPEED\" });\n  };\n\n  const typeSpeed = (e) => {\n    dispatch({ type: \"INPUT_SPEED\", value: parseInt(e.target.value) || 60 });\n  };\n\n  const toggleStart = () => {\n    dispatch({ type: \"TOGGLE_START\" });\n    // starts immediatly\n    if (!playing) {\n      playOn();\n    }\n  };\n\n  return (\n    <section>\n      <h1>Simple Metronome</h1>\n      <div className=\"metronome\">\n        <button onClick={substract}> - </button>\n        <input value={speed} onChange={typeSpeed} />\n        <button onClick={add}> + </button>\n        <input\n          type=\"range\"\n          min=\"35\"\n          max=\"280\"\n          value={speed}\n          step=\"1\"\n          onChange={typeSpeed}\n        />\n      </div>\n      <button onClick={toggleStart}> {playing ? \"Stop\" : \"Start\"}</button>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}